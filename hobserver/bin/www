#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hobserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//socket.io 모듈을 사용 및 create한 http 서버에 전달


// // socket.io 의 이벤트 등록 및 위의 socket.io 라이브러리르 socketIoHandler에게 전달

// var mongoDB = require('mongodb').MongoClient;
// var url = 'mongodb://127.0.0.1:27017';
// var dbObj = null;
// mongoDB.connect(url, { useUnifiedTopology: true }, function(err, db){
//   dbObj = db.db('Hobserver');
//   console.log("hobserver db connect~");
//   var socketIoImage1 = require('../modules/socketIoImage.js')(io, 'map_origin_evt',dbObj,'map_origin.jpg');
//   var socketIoImage2 = require('../modules/socketIoImage.js')(io, 'map_result_evt', dbObj,'map_result.jpg');
//   var socketIoImage3 = require('../modules/socketIoImage.js')(io, 'intruder_evt', dbObj,'intruder.jpg');
//   var socketIoOTP = require('../modules/socketIoOTP.js')(io, dbObj, 'otp_state_evt');
// });

/**
 * Listen on provided port, on all network interfaces.s
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

app.io.attach(server);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
